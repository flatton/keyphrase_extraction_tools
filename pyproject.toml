[tool.poetry]
name = "keyphrase_extraction"
version = "0.1.0"
description = "Experimentation using japanese_keyphrase_extractors"
authors = ["flatton <flatton211@gmail.com>"]
readme = "README.md"
license = { file = "LICENSE.md" }
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
keyphrase_extractors = { path = "module", develop = true }

[tool.poetry.group.dev.dependencies]
pyright = "^1.1.392.post0"
ruff = "^0.9.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4
include = ["**/module/src/*", "**/tests/*"]
exclude = [
    "__pycache__",  # Python bytecode cache
    ".git",         # Git metadata
    ".venv",        # Virtual environment
    "node_modules", # Node.js dependencies
    ".ruff_cache",  # Ruff's cache
    "*.txt",
    "*.csv",
    "*.json",
    "*.md",
]
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    "E",    # PEP8
    "F",    # pyflakes
    "I001", # isort
]
ignore = [
    "E501", # Line too long (violates the line-length limit)
    "E402", # Module level import not at the top of the file
    "E721", # Use isinstance() instead of direct type comparisons
    "E731", # Do not assign a lambda expression, use a def instead
    "E741", # Avoid ambiguous variable names
    "F722", # Do not re-raise exceptions without preserving the original traceback
]
fixable = [
    "I001", # Automatically fix import sorting issues
]
unfixable = [
    "F401", # Report unused imports
    "F841", # Report unused local variables
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true
order-by-type = true


[tool.pyright]
pythonVersion = "3.11"
stubPath = "module/src/typings"
include = ["**/module/src/*", "**/tests/*"]
ignore = ["**/__init__.py", "*.md", "**/tests/_*"]
reportMissingTypeStubs = false
typeCheckingMode = "strict"
